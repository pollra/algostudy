package org.example.algorithm.leetcode;

import java.util.LinkedList;
import java.util.Queue;
// https://leetcode.com/problems/number-of-islands/submissions/1401066938/
public class NumberOfIslands {

	private static boolean[][] visit;
	private static Queue<Node> queue;
	private static int[] dx = {0, 0, 1, -1};
	private static int[] dy = {1, -1, 0, 0};

	public static void main(String[] args) {
		NumberOfIslands bfs1 = new NumberOfIslands();
		char[][] grid1 = {
			{'1', '1', '0', '0', '0'},
			{'1', '1', '0', '0', '0'},
			{'0', '0', '1', '0', '0'},
			{'0', '0', '0', '1', '1'}
		};

		char[][] grid = {
			{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
			{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
			{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
			{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
			{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
			{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
		};

		System.out.println(bfs1.numIslands(grid1));
	}

	public int numIslands(char[][] grid) {
		visit = new boolean[grid.length][grid[0].length];
		int result = 0;
		queue = new LinkedList<>();
		for (int i = 0; i < grid.length; i++) {
			char[] chars = grid[i];
			for (int j = 0; j < chars.length; j++) {
				char aChar = chars[j];
				if (aChar == '1' && !visit[i][j]) {
					queue.add(new Node(i, j));
					visit[i][j] = true;
					bfs(grid);
					result++;
				}
			}
		}
		return result;
	}

	public static void bfs(char[][] grid) {
		while (!queue.isEmpty()) {
			Node node = queue.poll();
			for (int i = 0; i < 4; i++) {
				int nx = node.x + dx[i];
				int ny = node.y + dy[i];
				if (nx >= 0 && ny >= 0 && nx < visit.length && ny < visit[0].length) {
					if (grid[nx][ny] == '1' && !visit[nx][ny]) {
						visit[nx][ny] = true;
						queue.add(new Node(nx, ny));
					}
				}
			}
		}
	}

	static class Node {
		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

}
